# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Int, last: Int): GlobalConnection!
  getAuthorsDocument(relativePath: String): AuthorsDocument!
  getAuthorsList(before: String, after: String, first: Int, last: Int): AuthorsConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | GlobalDocument | AuthorsDocument | PagesDocument

union PostsAuthorDocument = AuthorsDocument

type Posts {
  title: String
  author: PostsAuthorDocument
  date: String
  heroImg: String
  excerpt: String
  _body: String
}

type PostsDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type GlobalFooter {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type Global {
  footer: GlobalFooter
}

type GlobalDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [GlobalConnectionEdges]
}

type Authors {
  name: String
  avatar: String
}

type AuthorsDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Authors!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorsConnectionEdges {
  cursor: String
  node: AuthorsDocument
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorsConnectionEdges]
}

type PagesBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PagesBlocksHeroImage {
  src: String
  alt: String
}

type PagesBlocksHero {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActions]
  color: String
  image: PagesBlocksHeroImage
}

type PagesBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PagesBlocksFeaturesItems {
  icon: PagesBlocksFeaturesItemsIcon
  title: String
  text: String
}

type PagesBlocksFeatures {
  items: [PagesBlocksFeaturesItems]
  color: String
}

type PagesBlocksContent {
  body: String
  color: String
}

union PagesBlocks = PagesBlocksHero | PagesBlocksFeatures | PagesBlocksContent

type Pages {
  blocks: [PagesBlocks]
}

type PagesDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updateAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  posts: PostsMutation
  global: GlobalMutation
  authors: AuthorsMutation
  pages: PagesMutation
}

input PostsMutation {
  title: String
  author: String
  date: String
  heroImg: String
  excerpt: String
  _body: String
}

input GlobalFooterMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalMutation {
  footer: GlobalFooterMutation
}

input AuthorsMutation {
  name: String
  avatar: String
}

input PagesBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PagesBlocksHeroImageMutation {
  src: String
  alt: String
}

input PagesBlocksHeroMutation {
  tagline: String
  headline: String
  text: String
  actions: [PagesBlocksHeroActionsMutation]
  color: String
  image: PagesBlocksHeroImageMutation
}

input PagesBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PagesBlocksFeaturesItemsMutation {
  icon: PagesBlocksFeaturesItemsIconMutation
  title: String
  text: String
}

input PagesBlocksFeaturesMutation {
  items: [PagesBlocksFeaturesItemsMutation]
  color: String
}

input PagesBlocksContentMutation {
  body: String
  color: String
}

input PagesBlocksMutation {
  hero: PagesBlocksHeroMutation
  features: PagesBlocksFeaturesMutation
  content: PagesBlocksContentMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  